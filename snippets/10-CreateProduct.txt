func (h *Handler) CreateProduct(w http.ResponseWriter, r *http.Request) {

	// Parse the multipart form, 10 MB max upload size
	r.ParseMultipartForm(10 << 20)

	// Initialize error messages slice
	var responseMessages []string

	//Check for empty fields
	ProductName := r.FormValue("product_name")
	ProductPrice := r.FormValue("price")
	ProductDescription := r.FormValue("description")

	if ProductName == "" || ProductPrice == "" || ProductDescription == "" {
		responseMessages = append(responseMessages, "All Fields Are Required")

		sendProductMessage(w, responseMessages, nil)
		return
	}

	/* Process File Upload */

	// Retrieve the file from form data
	file, handler, err := r.FormFile("product_image")
	if err != nil {
		if err == http.ErrMissingFile {
			responseMessages = append(responseMessages, "Select an Image for the Product")
		} else {
			responseMessages = append(responseMessages, "Error retrieving the file")
		}

		if len(responseMessages) > 0 {
			fmt.Println(responseMessages)
			sendProductMessage(w, responseMessages, nil)
			return
		}

	}
	defer file.Close()

	// Generate a unique filename to prevent overwriting and conflicts
	uuid, err := uuid.NewRandom()
	if err != nil {
		responseMessages = append(responseMessages, "Error generating unique identifier")
		sendProductMessage(w, responseMessages, nil)

		return
	}
	filename := uuid.String() + filepath.Ext(handler.Filename) // Append the file extension

	// Create the full path for saving the file
	filePath := filepath.Join("static/uploads", filename)

	// Save the file to the server
	dst, err := os.Create(filePath)
	if err != nil {
		responseMessages = append(responseMessages, "Error saving the file")
		sendProductMessage(w, responseMessages, nil)

		return
	}
	defer dst.Close()
	if _, err = io.Copy(dst, file); err != nil {
		responseMessages = append(responseMessages, "Error saving the file")
		sendProductMessage(w, responseMessages, nil)
		return
	}

	price, err := strconv.ParseFloat(r.FormValue("price"), 64)
	if err != nil {

		responseMessages = append(responseMessages, "Invalid price")
		sendProductMessage(w, responseMessages, nil)
		return
	}

	product := models.Product{
		ProductName:  ProductName,
		Price:        price,
		Description:  ProductDescription,
		ProductImage: filename,
	}

	err = h.Repo.Product.CreateProduct(&product)
	if err != nil {
		//http.Error(w, err.Error(), http.StatusInternalServerError)
		responseMessages = append(responseMessages, "Invalid price"+err.Error())
		sendProductMessage(w, responseMessages, nil)

		return
	}

	//Fake Latency
	time.Sleep(2 * time.Second)

	sendProductMessage(w, []string{}, &product)
}